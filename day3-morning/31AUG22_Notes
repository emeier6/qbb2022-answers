#!/usr/bin/env python3
When opening and trying to run python script, need the following:



Running the line of code requires the ./: and the bed/vf file to run:
	./bed_parser.py hg38_gencodev41_chr21.bed

OR

	can run as:
	python FILENAME BEDorVCF

Key has to be a mutable thing, but values can be any sort of file



How does the syntax of () and [] work within a line?
	#Order of operations
	
	fieldsN = len(fields)
	
	how_many_columns_in_current_line = range(min(len(field_types), len(fields)))
	print ( how_many_columns_in_current_line )
	for j in how_many_columns_in_current_line:
		print( j )
		fields[j] = field_types[j](fields[j])



if __name__ == "__main__":
	fname = sys.argv[1]
	bed = parse_bed(fname)
	
	
	
A tuple is an immutable string written as [( , , ,...)] with multiple values that cannot be changed. They can be used in dictionaries to reference. The dictionary should denote which (can be more than 1) are the keys. Then, it can output the values, written similar as:
	dict_SNP[(x, y, z)] = z
		This already denotes that x and y are keys for the dictionary
		EXAMPLE:
			SNP_dict = {}
			for line in db:
			    if line[0] == "CHROM":
			        continue
			    chrm = line[0]
			    pos = line[1]
			    identification = line[2]
    
			    SNP_dict[(chrm, pos, identification)] = identification
				
Using a dictionary to count if there are a a number of mismatched entries:
	counter = 0
	for i, things in enumerate(randSNP):
	    if things[0] == "CHROM":
	        continue
	    chrm = things[0]
	    pos = things[1]
	    identification = things[2]
    
	    if (chrm, pos) in SNP_dict.keys():
	        things[2] = SNP_dict[(chrm, pos, identification)]
	    else:
	        counter = counter + 1
	        #counter =+ 1
	print(counter)        
	



(key1, key2, ...)			DICTIONARY.keys()		search the key
(value)						DICTIONARY.values()		search the values
(key1, key2, ..., value)	DICTIONARY.items()		searches both key and values produced as tupple



#!/usr/bin/env python3
#conda install openblas -y 
    #takes a minute

### Interactive Python interface for the Interactive lecture:
###### DATA EXPLORATION AND VISUALIZATION

    #Using differnt types of graphing to visualize the data
    #Understand different uses of imports/modules

#Libraries:
    #Matplotlib, biopython, numpy, ...
    
        #NumPY: efficient numerical analysis
        #SciPy: clustering, lin alg
        #Statsmodels: Statistics and ML

#Importing:
    #importing pre-made code
        #alias "np" can be anything
#    import numpy as np
    
    #importing a parsed file
        #"parse_vcf" can be anything
#    from vcfParser import parse_vcf
    
#Data visualization - MATPLOTLIB
    #single, double, multidimensional
    #Good resource in the bootcamp, as well as fundamentals of data visualization
    #https://clauswilke.com/dataviz
    
    #STEP 1: Import matplotlib
    
################ IN CLASS LIVE TUTORIAL #########################################

    
import matplotlib.pyplot as plt    

#create some strings of information
x = [1, 2, 3, 4, 5]
y = [25, 8, 2, 8, 25]

x2 = [2, 4, 6]
y2 = [8, 64, 216]

#Create new figure and axis
    #Will memorize this at a certain point, just for plotting formatting
    #subplots allows us to lay out multiple panels on a plot
    #fig = entire plotting space
    #ax = panel
#fig, ax = plt.subplots()
#Now, making two seperate panels
fig, ax = plt.subplots(nrows=2)
print(len(ax))
    #this shows us we have two panel
    
#ax.plot(x, y, label = "x^2")
ax[0].plot(x, y, label = "x^2")
    #can make another call for ax.plot on the same panel as the previous one
#ax.plot(x2, y2, label = "x^3")
ax[1].plot(x2, y2, label = "x^3")
ax[0].legend()
ax[1].legend()
    #legend allows you to add labels, but can only be added if we show the plot with    
    #cannot run a legend on an array with only one variable 
#plt.show()

print(genes_per_chrom)    #plt.savefig("FILENAMETOSAVETO")
    #need to denote as.png or .pdf, which ever file makes the most sense

plt.close(fig)
    #will plot, then need to close the plot before continuing with coding :^)


    #NEED TO SILENCE plt.show() THIS AND THEN RUN BACK THE ./day3-afternoon.py IN ORDER TO OVERWRITE FILE NAME
    #THIS WILL THEN ALLOW FOR THE FILE TO BE SAVED AND OPENABLE with:
        #open lineplot.png
        
        

###################################################################################

######################## hist2.py #################################################
        
        
        
#!/usr/bin/env python3
import matplotlib.pyplot as plt   
import numpy as np
    #importing packages


#np.random.seed(42)    
    #setting a seed data to allow for reproducibility (if study includes generating random data)
    #essentially, a random number generator from the data, like data sampling 
   
   
    
#norm_data = np.random.normal(0, 1, int(1e6))
    #np.random.normal represents the bell-shaped typical distribution known as (Gaussian) distribution.
        #mean 0, std dev 1, 50 size of data or samples
        #naming the numpy random normally distributed data as norm_data
            #int(1e6) = 1 million
            #As distribution increases and the sample size increases, you get more normal distributions
        #Same as what we were doing in R all long ago, statistical confidence increases with more iterations of multiple random number sequence generations (seed) 




#plt.hist(norm_data, bins = 50)
    #histogram plotting of norm_data file (that is looking at normal distribution of 5 variables)
    #bins = how many categories there are 

#plt.show()
    #showing the file
    





################## Running bcftools ########################
########## SOME POP GEN STUFF ##############################

#conda create -n bcftools -y python=3 bcftools
#conda activate bcftools
#bcftools

    ###DIDNT WORK:
    
#conda deactivate
#conda create -n bcftools -y python=3 bcftools -c conda-forge
#conda activate bcftools
#bcftools

#Desired tool from bcftools?
    #query        transform VCF/BCF into user-defined formats
    #bcftools query -f 
        #will extract the '%POS\n' file.bcf
            #This will look for the POS and create a new line for each position
            #We are looking at allele freqs, so:
                #bcftools query -f "%AF\n" ALL.chr21.shapeit2_integrated_v1a.GRCh38.20181129.phased.vcf.gz > chr21_af.txt
                    #calling .txt for us to recognize only just a text file, so add .txt
                    #NOT a vcf file


## the new chr21_af.txt
    #wc -l = almost a million lines :^)
    
#conda deactivate to exit terminal
#    (bcftools) to (base)

snp_af = np.genfromtxt("chr21_af.txt")
#print(np.genfromtxt("chr21_af.txt"))
    #check to see that it downloaded well
        #OUTPUT: [0.   0.1  0.01 ... 0.   0.   0.03]
#print(snp_af.shape)
        #shape tells you the number of arrays loaded in, good other check
            #OUTPUT: (976599,)
plt.hist(snp_af, bins = 50)
    #Population is skewed left, kinda showing that there are a lot of unique SNPs, and there are many unique SNPs
        #Consequence of exploding population size = more variation in SNPs across populations. 
        #Could also be like, with climate change and as species go extinct, new species will enter the niches and also grow.
        #Converseley, one could imagine that if human populations shrink, we would see more alignments towards the right of the graph, and more similar SNPs
plt.show()
          
          
       
       
       
          
            
########## LAST IN CLASS EXERCISE ################################################

#file in use: gencode.v41.annotation.gtf.gz
#.gz is a compressed gtf file, and neds to be changed from binary/comp format to a workable format
    #look at with gzcat :^)
        #gzcat gencode.v41... | head #to get the first 10 lines
    
    #gzcat gencode.v41.annotation.gtf.gz | grep -v "^##" | cut -f 1 | sort | uniq -c > genes_per_chrom.txt
        #grep -v to undo the headers and exclude, ^ denotes at the beginning
        #cutting the first column and 
        #sorting by the first column
        #sorting by the number of unique variables
        #storing as a .txt because we are only extrapolating a few columns


#Now, plotting! :)
    #To plot, plot as a barchart because categories (chrom) and y = counts

#SEE: barchart.py    
        


    #########################################################################
    
    
    ###################### barchart.py ######################################
    
    

#!/usr/bin/env python3
import matplotlib.pyplot as plt   
import numpy as np

genes_per_chrom = np.genfromtxt("genes_per_chrom.txt", dtype = None, encoding = None, 
                names = ["gene_count", "chrom_name"])
    #reading in mixed types of data, IE: chromosome strings in second column and integers as first column
        #let numpy guess thre dtype and the encoding type by setting it as none
        #lastly, we will name our columns 
    
#can also use the text from an online url, and looking only at certain rows
chrom_lengths = np.genefromtext("URL", dtype = None, encoding = None, 
                          names = ["chrom_name", "chrom_lengths"])[0:25]

#naming each of the points:
for i, txt in enumerate(genes_per_chrom['chrom_name']):
    ax.annotate(txt, (chrom_lengths['chrom_length'][i], genes_per_chrom['gene_count'][i]))
    #add the text of the chromosome name at the position of the chromosome length at the gene count i

ax.set_ylabel("Number of genes/transcripts/exons in GTF")
ax.set_xlabel("")
                   
#print(genes_per_chrom)
    #OUTPUT: shows numbers (integers) as floats, and not reading the second column
        #to fix this, we tell numpy to guess with the dtype and the encoding
        
        #now, include names of the columns
print(genes_per_chrom["gene_count"])
    #to report only the gene counts and, 
print(genes_per_chrom["chrom_name"])
    #to report only the chromosome names
    
    
    
fig, ax = plt.subplots()

ax.bar(genes_per_chrom["chrom_name"], genes_per_chrom["gene_count"])
    #x and then y in the ax.bar

plt.show()

print(genes_per_chrom)



##################################################################################


########################### Last review #########################################

#file = random_snippet.vcf

#total number of pairs = AN = 5096
            #total number of samples aka individuals = 5096 (because 2 sets per person) = 2048
            
